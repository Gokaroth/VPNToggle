#!/bin/bash

# Advanced VPN Toggle Script with Daemon Management and Country Selection
# Automatically enables/disables services as needed
# Compatible with: Garuda Linux (Arch-based)
# Author: gokaroth

# Configuration
SERVER_CONFIG="server"  # Your OpenVPN server config name
ICON_PATH="$HOME/.local/share/icons"

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Service management functions
check_service_status() {
    local service=$1
    if systemctl is-active --quiet "$service"; then
        echo "running"
    elif systemctl is-enabled --quiet "$service"; then
        echo "enabled"
    else
        echo "disabled"
    fi
}

enable_and_start_service() {
    local service=$1
    local description=$2

    echo -e "${CYAN}Enabling and starting $description...${NC}"

    # Enable the service (auto-start at boot)
    if ! systemctl is-enabled --quiet "$service"; then
        echo "  ↳ Enabling $service for auto-start..."
        sudo systemctl enable "$service"
    fi

    # Start the service if not running
    if ! systemctl is-active --quiet "$service"; then
        echo "  ↳ Starting $service..."
        sudo systemctl start "$service"
        sleep 2

        # Verify it started
        if systemctl is-active --quiet "$service"; then
            echo -e "  ↳ ${GREEN}✓ $description started successfully${NC}"
            return 0
        else
            echo -e "  ↳ ${RED}✗ Failed to start $description${NC}"
            return 1
        fi
    else
        echo -e "  ↳ ${GREEN}✓ $description already running${NC}"
        return 0
    fi
}

stop_and_disable_service() {
    local service=$1
    local description=$2
    local keep_enabled=$3  # Optional: set to "keep" to only stop, not disable

    echo -e "${CYAN}Stopping $description...${NC}"

    # Stop the service if running
    if systemctl is-active --quiet "$service"; then
        echo "  ↳ Stopping $service..."
        sudo systemctl stop "$service"
        sleep 1

        if systemctl is-active --quiet "$service"; then
            echo -e "  ↳ ${RED}✗ Failed to stop $description${NC}"
            return 1
        else
            echo -e "  ↳ ${GREEN}✓ $description stopped${NC}"
        fi
    fi

    # Disable auto-start unless told to keep enabled
    if [[ "$keep_enabled" != "keep" ]] && systemctl is-enabled --quiet "$service"; then
        echo "  ↳ Disabling auto-start for $service..."
        sudo systemctl disable "$service"
        echo -e "  ↳ ${GREEN}✓ Auto-start disabled${NC}"
    fi

    return 0
}

# Enhanced NordVPN connection with country selection
connect_nordvpn_country() {
    local country=$1

    if [[ -n "$country" ]]; then
        echo -e "${CYAN}Connecting to NordVPN in $country...${NC}"
        if nordvpn connect "$country"; then
            notify-send "VPN Toggle" "Connected to NordVPN in $country" -i network-vpn -t 3000
            return 0
        else
            echo -e "${RED}✗ Failed to connect to $country${NC}"
            echo -e "${YELLOW}Trying automatic connection instead...${NC}"
            nordvpn connect
        fi
    else
        echo -e "${CYAN}Connecting to NordVPN (automatic server)...${NC}"
        nordvpn connect
    fi
}

# Function to get current VPN status
get_vpn_status() {
    local nordvpn_running=false
    local openvpn_running=false

    # Check NordVPN (more robust check)
    if systemctl is-active --quiet nordvpnd && command -v nordvpn &> /dev/null; then
        if nordvpn status 2>/dev/null | grep -q "Status: Connected"; then
            nordvpn_running=true
        fi
    fi

    # Check OpenVPN server
    if systemctl is-active --quiet openvpn-server@${SERVER_CONFIG}.service; then
        openvpn_running=true
    fi

    # Determine status
    if $nordvpn_running && $openvpn_running; then
        echo "both"  # Shouldn't happen, but handle it
    elif $nordvpn_running; then
        echo "nordvpn"
    elif $openvpn_running; then
        echo "openvpn-server"
    else
        echo "off"
    fi
}

# Enhanced status display with service information
show_status() {
    current=$(get_vpn_status)
    echo -e "\n${BLUE}=== Current VPN Status ===${NC}"

    case "$current" in
        "nordvpn")
            echo -e "${GREEN}✓ NordVPN: Connected${NC}"
            nordvpn status 2>/dev/null | grep -E "(Status|Server|Country|City|IP)" || echo "  Connection details unavailable"
            echo -e "  Service: nordvpnd $(check_service_status nordvpnd)"
            ;;
        "openvpn-server")
            echo -e "${BLUE}✓ OpenVPN Server: Running${NC}"
            local status_info=$(systemctl status openvpn-server@${SERVER_CONFIG}.service --no-pager -l 2>/dev/null | grep "Active:")
            echo "  $status_info"

            # Show connected clients if status file exists
            if [[ -f "/run/openvpn-server/status-${SERVER_CONFIG}.log" ]]; then
                local clients=$(grep "^CLIENT_LIST" "/run/openvpn-server/status-${SERVER_CONFIG}.log" 2>/dev/null | wc -l)
                echo "  Connected clients: $clients"
            fi
            ;;
        "both")
            echo -e "${YELLOW}⚠ Both VPNs Running (unusual state)${NC}"
            echo -e "  NordVPN: $(check_service_status nordvpnd)"
            echo -e "  OpenVPN: $(check_service_status openvpn-server@${SERVER_CONFIG}.service)"
            ;;
        "off")
            echo -e "${RED}✗ All VPNs Disconnected${NC}"
            ;;
    esac

    # Show service states
    echo -e "\n${CYAN}Service States:${NC}"
    echo "  nordvpnd: $(check_service_status nordvpnd)"
    echo "  openvpn-server@${SERVER_CONFIG}: $(check_service_status openvpn-server@${SERVER_CONFIG}.service)"
}

# Show available countries with common presets
show_countries() {
    echo -e "${BLUE}=== Available Countries ===${NC}"
    echo -e "\n${CYAN}Quick Presets:${NC}"
    echo "  privacy/priv    - Switzerland (maximum privacy)"
    echo "  speed/fast      - Netherlands (fastest in Europe)"
    echo "  streaming/us    - United States (Netflix, Hulu)"
    echo "  nearby          - Germany (close to Europe)"
    echo "  random          - Random privacy-focused country"

    echo -e "\n${CYAN}Popular Countries:${NC}"
    echo "  switzerland, sweden, netherlands, germany"
    echo "  united_states, united_kingdom, canada"
    echo "  japan, australia, france, norway"

    echo -e "\n${CYAN}Usage Examples:${NC}"
    echo "  $0 nordvpn switzerland"
    echo "  $0 nordvpn privacy"
    echo "  $0 nordvpn united_states"

    echo -e "\n${YELLOW}For full country list, use: nordvpn countries${NC}"
}

# Smart country selection based on purpose
select_country_by_purpose() {
    local purpose=$1

    case "$purpose" in
        "privacy"|"priv")
            echo "switzerland"
            ;;
        "speed"|"fast")
            echo "netherlands"
            ;;
        "streaming"|"netflix"|"us")
            echo "united_states"
            ;;
        "nearby")
            echo "germany"  # Adjust based on your location
            ;;
        "random")
            local countries=("switzerland" "netherlands" "united_states" "canada" "sweden" "germany")
            echo "${countries[$RANDOM % ${#countries[@]}]}"
            ;;
        *)
            echo "$purpose"  # Return as-is if it's likely a country name
            ;;
    esac
}

# Main VPN switching function with intelligent daemon management
switch_vpn() {
    local target=$1
    local country_or_purpose=$2
    echo -e "\n${YELLOW}=== VPN Switch Operation ===${NC}"

    case "$target" in
        "nordvpn"|"nord")
            # Check if a country/purpose was specified
            local target_country=""
            if [[ -n "$country_or_purpose" ]]; then
                target_country=$(select_country_by_purpose "$country_or_purpose")
                echo -e "${BLUE}Target: $country_or_purpose -> $target_country${NC}"
            fi

            echo -e "${YELLOW}Switching to NordVPN...${NC}"

            # Step 1: Stop and disable OpenVPN server if running
            if systemctl is-active --quiet openvpn-server@${SERVER_CONFIG}.service; then
                stop_and_disable_service "openvpn-server@${SERVER_CONFIG}.service" "OpenVPN Server"
            fi

            # Step 2: Ensure NordVPN daemon is enabled and running
            if ! enable_and_start_service "nordvpnd" "NordVPN Daemon"; then
                echo -e "${RED}✗ Cannot proceed without NordVPN daemon${NC}"
                return 1
            fi

            # Step 3: Disconnect any existing NordVPN connection (clean slate)
            echo -e "${CYAN}Preparing NordVPN connection...${NC}"
            nordvpn disconnect &>/dev/null
            sleep 1

            # Step 4: Connect with country selection
            if connect_nordvpn_country "$target_country"; then
                echo -e "${GREEN}✓ Successfully connected to NordVPN${NC}"
            else
                echo -e "${RED}✗ Failed to connect to NordVPN${NC}"
                notify-send "VPN Toggle" "Failed to connect to NordVPN" -i dialog-error -t 3000
                return 1
            fi
            ;;

        "openvpn"|"server")
            echo -e "${YELLOW}Switching to OpenVPN Server...${NC}"

            # Step 1: Disconnect and optionally disable NordVPN
            if systemctl is-active --quiet nordvpnd; then
                echo -e "${CYAN}Disconnecting NordVPN...${NC}"
                nordvpn disconnect &>/dev/null
                sleep 2

                # Stop NordVPN daemon but keep it enabled for easy restart
                stop_and_disable_service "nordvpnd" "NordVPN Daemon" "keep"
            fi

            # Step 2: Enable and start OpenVPN server
            if ! enable_and_start_service "openvpn-server@${SERVER_CONFIG}.service" "OpenVPN Server"; then
                echo -e "${RED}✗ Failed to start OpenVPN server${NC}"
                notify-send "VPN Toggle" "Failed to start OpenVPN server" -i dialog-error -t 3000
                return 1
            fi

            # Step 3: Verify server is accepting connections
            sleep 2
            if systemctl is-active --quiet openvpn-server@${SERVER_CONFIG}.service; then
                echo -e "${GREEN}✓ OpenVPN server is running and ready${NC}"
                notify-send "VPN Toggle" "OpenVPN server started successfully" -i network-server -t 3000

                # Show listening port for confirmation
                local port_info=$(ss -tulpn | grep openvpn | head -1)
                if [[ -n "$port_info" ]]; then
                    echo -e "  ${CYAN}Listening on: $port_info${NC}"
                fi
            else
                echo -e "${RED}✗ OpenVPN server failed to start properly${NC}"
                return 1
            fi
            ;;

        "off"|"disconnect"|"stop")
            echo -e "${YELLOW}Disconnecting all VPNs and stopping daemons...${NC}"

            # Step 1: Disconnect NordVPN and stop daemon
            if systemctl is-active --quiet nordvpnd; then
                echo -e "${CYAN}Disconnecting NordVPN...${NC}"
                nordvpn disconnect &>/dev/null
                stop_and_disable_service "nordvpnd" "NordVPN Daemon"
            fi

            # Step 2: Stop OpenVPN server
            if systemctl is-active --quiet openvpn-server@${SERVER_CONFIG}.service; then
                stop_and_disable_service "openvpn-server@${SERVER_CONFIG}.service" "OpenVPN Server"
            fi

            echo -e "${GREEN}✓ All VPNs disconnected and services disabled${NC}"
            notify-send "VPN Toggle" "All VPNs disconnected - services stopped" -i network-disconnect -t 3000
            ;;

        "cycle"|"")
            # Intelligent cycling: off -> nordvpn -> openvpn-server -> off
            local current=$(get_vpn_status)
            echo -e "${BLUE}Current state: $current${NC}"
            case "$current" in
                "off")
                    echo "Cycling to NordVPN..."
                    switch_vpn "nordvpn"
                    ;;
                "nordvpn")
                    echo "Cycling to OpenVPN server..."
                    switch_vpn "server"
                    ;;
                "openvpn-server")
                    echo "Cycling to disconnected..."
                    switch_vpn "off"
                    ;;
                "both")
                    echo "Resolving dual-VPN state by disconnecting all..."
                    switch_vpn "off"
                    ;;
            esac
            ;;

        "countries"|"list")
            show_countries
            return 0
            ;;

        "status"|"check")
            show_status
            return 0
            ;;

        "services"|"daemons")
            echo -e "\n${CYAN}=== Service Management Overview ===${NC}"
            echo "nordvpnd: $(check_service_status nordvpnd)"
            echo "openvpn-server@${SERVER_CONFIG}: $(check_service_status openvpn-server@${SERVER_CONFIG}.service)"
            echo ""
            echo -e "${BLUE}Service Commands:${NC}"
            echo "  sudo systemctl start/stop/enable/disable nordvpnd"
            echo "  sudo systemctl start/stop/enable/disable openvpn-server@${SERVER_CONFIG}.service"
            return 0
            ;;

        "help"|"-h"|"--help")
            echo "Smart VPN Toggle Script with Daemon Management & Country Selection"
            echo "Automatically enables/disables services as needed for optimal resource usage"
            echo ""
            echo "Usage: $0 [COMMAND] [COUNTRY/PURPOSE]"
            echo ""
            echo "Commands:"
            echo "  nordvpn, nord [country]   Connect to NordVPN (optionally specify country)"
            echo "  openvpn, server           Start OpenVPN server (disables nordvpnd)"
            echo "  off, stop                 Disconnect all VPNs (disables all daemons)"
            echo "  cycle, [empty]            Cycle through states intelligently"
            echo "  status, check             Show detailed status and service info"
            echo "  services                  Show service management overview"
            echo "  countries, list           Show available countries and presets"
            echo "  help                      Show this help"
            echo ""
            echo "Country/Purpose Options:"
            echo "  privacy, priv             Switzerland (maximum privacy)"
            echo "  speed, fast               Netherlands (fastest speeds)"
            echo "  streaming, netflix, us    United States (streaming access)"
            echo "  nearby                    Germany (close to Europe)"
            echo "  random                    Random privacy-focused country"
            echo "  [country_name]            Any specific country name"
            echo ""
            echo "Service Management Features:"
            echo "  • Automatically enables required services"
            echo "  • Disables unused services to save resources"
            echo "  • Prevents conflicts between VPN services"
            echo "  • Provides detailed status information"
            echo "  • Smart country selection with presets"
            echo ""
            echo "Examples:"
            echo "  $0 nordvpn switzerland    # Connect to Switzerland"
            echo "  $0 nordvpn privacy        # Connect for privacy (Switzerland)"
            echo "  $0 nordvpn streaming      # Connect for streaming (US)"
            echo "  $0 server                 # Start OpenVPN server"
            echo "  $0 off                    # Disconnect all VPNs"
            echo "  $0 countries              # Show available options"
            ;;

        *)
            # If unknown command, check if it might be a country name
            if nordvpn countries 2>/dev/null | grep -qi "$target"; then
                echo -e "${YELLOW}Attempting to connect to: $target${NC}"
                switch_vpn "nordvpn" "$target"
            else
                echo -e "${RED}Unknown command: $target${NC}"
                echo "Use '$0 help' for usage information"
                echo "Use '$0 countries' to see available countries"
                exit 1
            fi
            ;;
    esac
}

# Enhanced dependency checking
check_dependencies() {
    local missing_deps=()
    local warnings=()

    # Check for critical dependencies
    if ! command -v nordvpn &> /dev/null; then
        missing_deps+=("nordvpn")
    fi

    if ! command -v systemctl &> /dev/null; then
        missing_deps+=("systemctl")
    fi

    # Check for optional dependencies
    if ! command -v notify-send &> /dev/null; then
        warnings+=("notify-send (install libnotify for desktop notifications)")
    fi

    if ! command -v ss &> /dev/null; then
        warnings+=("ss (install iproute2 for network status info)")
    fi

    # Report missing critical dependencies
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${RED}Missing critical dependencies: ${missing_deps[*]}${NC}"
        echo "Please install missing dependencies first."
        exit 1
    fi

    # Report warnings for optional dependencies
    if [ ${#warnings[@]} -ne 0 ]; then
        echo -e "${YELLOW}Optional dependencies missing:${NC}"
        for warning in "${warnings[@]}"; do
            echo -e "  ${YELLOW}⚠ $warning${NC}"
        done
        echo ""
    fi
}

# Main execution function
main() {
    # Check if running as root (security check)
    if [ "$EUID" -eq 0 ]; then
        echo -e "${RED}Don't run this script as root for security reasons!${NC}"
        echo "The script will use sudo when needed."
        exit 1
    fi

    # Check dependencies
    check_dependencies

    # Handle arguments
    if [ $# -eq 0 ]; then
        switch_vpn "cycle"
    elif [ $# -eq 1 ]; then
        switch_vpn "$1"
    else
        switch_vpn "$1" "$2"
    fi

    # Show final status (unless just showing help, services info, or countries)
    if [[ "$1" != "help" && "$1" != "-h" && "$1" != "--help" && "$1" != "services" && "$1" != "daemons" && "$1" != "countries" && "$1" != "list" ]]; then
        show_status
    fi
}

# Run main function with all arguments
main "$@"
